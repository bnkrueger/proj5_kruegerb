TITLE Program5    (Program5.asm)

INCLUDE Irvine32.inc

; (insert constant definitions here)
    ARRAY_SIZE = 200
    PER_LINE = 20
    LO_RANDOM = 15
    HI_RANDOM = 50

.data
programtitle    BYTE    "Welcome to Generating, Sorting, and Counting Random integers!", 0
authorname      BYTE    "Author: Brianna Krueger", 0 
introduction    BYTE    "This program generates 200 random integers between 15 and 50, inclusive.
                         It then displays the original list, sorts the list, displays the median value of the list,
                         displays the list sorted in ascending order, and finally displays the number of instances
                         of each generated value, starting with the number of lowest.", 0
unsorted        BYTE    "Your unsorted randomm numbers:", 0
median          BYTE    "The median value of the array:", 0
sorted          BYTE     "Your sorted random numbers:", 0

instance        BYTE    "Your list of instances of each generated number, starting with the smallest value:", 0
goodbye         BYTE    "Thanks for trying out the programm! Goodbye.", 0
array           DWORD   200 DUP(?)
countarray      DWORD   200 DUP(?)
arraysize       DWORD   0
space           BYTE    " ", 0

.code
main PROC

    CALL    Randomize
    
    
    ; introduction 
    PUSH    OFFSET programtitle     ;16
    PUSH    OFFSET authorname       ;12
    PUSH    OFFSET introduction     ;8
    CALL    introduction 
    
    ;fill array
    PUSH    OFFSET array
    PUSH    OFFSET arraysize
    PUSH    HI_RANDOM
    PUSH    LO_RANDOM
    CALL    fillArray
    CALL    CrLF
    
    ;unsorted list label
    PUSH    OFFSET unsorted
    CALL    Label
    CALL    CrLF
    
    ;unsorted list
    PUSH    OFFSET array
    PUSH    arraysize
    PUSH    OFFSET space
    CALL    displayList
    CALL    CrLF
    CALL    CrLF
    
    ;sort the list
    PUSH    OFFSET array
    PUSH    arraysize
    CALL    sortList
    
    ;median label 
    PUSH    OFFEST median
    CALL    Label
    
    ;median value
    PUSH    OFFSET array
    PUSH    arraysize
    CALL    displayMedian
    CALL    CrLF
    CALL    CrLF
    
    ;sorted array label
    PUSH    OFFSET sorted
    CALL    Label
    CALL    CrLF
    
    ;sorted array
    PUSH    OFFSET array
    PUSH    arraysize
    CALL    displayList
    
    ;count list label
    PUSH    OFFSET instance
    CALL    Label
    CALL    CrLF
    
    ;count list store
    PUSH     OFFSET array
    PUSH     OFFSET countArray
    PUSH    ARRAYSIZE
    PUSH    OFFSET cArraySize
    CALL    countList
    
    ;count list display
    PUSH     OFFSET countArray
    PUSH    cArraySize
    PUSH    OFFSET spaces
    CALL    displayArray ;display array call #3
    CALL    CrLf
    CALL    CrLf
    
    ;farewell 
    PUSH    OFFSET goodbye
    CALL    farewell
    
   
    exit
main ENDP

introduction PROC
    PUSH    EBP
    MOV     EBP, ESP
    MOV     EDX, [EBP + 16]
    CALL    WriteString
    CALL    CrLF
    
    MOV     EDX, [EBP + 12]
    MOV     WriteString
    CALL    CrLF
    
    MOV     EDX, [EBP + 8]
    CALL    WriteString
    CALL    CrLF
    CALL    CrLF
    
    POP     EBP
    RET     8
    
introduction ENDP

fillArray PROC
    PUSH    EBP
    MOV     EBP, ESP 
    MOV     ESI, [EBP + 12] 
    MOV     ECX, [EBP + 8]      ;array size... set loop counter
    
    fillvalues:
    MOV     EAX, HI_RANDOM
    SUB     EAX, LO_RANDOM
    INC     EAX
    CALL    RandomRange
    ADD     EAX, LO_RANDOM
    MOV     [ESI], EAX
    
    ADD     ESI, 4
    LOOP    fillvalues
    
    POP     EBP
    RET     4
    
fillArray ENDP
 
Label PROC
    
    PUSH    EBP
    MOV     EBP, ESP
    
    MOV     EDX, [EBP + 8]
    CALL    WriteString
    
Label ENDP
 
sortList PROC
    PUSH    EBP
    MOV     EBP, ESP
    MOV     ECX, [EBP + 8]
    MOV     ESI, [EBP + 12]
    DEC     ECX
    
firstLoop: 
    MOV     EAX, [ESI]
    MOV     EDX, ESI
    PUSH    ECX
    
secondLoop:
    MOV     EBX, [ESI + 4]
    MOV     EAX, [EDX]
    CMP     EAX, EBX
    JLE     noSwap
    ADD     ESI, 4
    PUSH    ESI
    PUSH    EDX
    PUSH    ECX
    CALL    exchangeElements
    SUB     ESI, 4
    
noSwap: 
    ADD     ESI, 4
    LOOP    secondLoop
    
    POP     ECX
    MOV     ESI, EDX
    
    ADD     ESI, 4
    LOOP    firstLoop
    
    POP     EBP
    RET     8
    
sortList ENDP

exchangeElements PROC
    PUSH    EBP
    MOV     EBP, ESP
    MOV     EAX, [EBP + 16]
    MOV     EBX, [EBP + 12]
    
    MOV     EDX, EAX
    SUB     EDX, EBX
    
    MOV     ESI, EBX
    MOV     ECX, [EBX]
    MOV     EAX, [EAX]
    
    MOV     [ESI], EAX
    ADD     ESI, EDX
    MOV     [ESI], ECX
    
    POPAD
    POP     EBP
    RET     12
    
exchangeElements ENDP

displayMedian PROC
    PUSH    EBP
    MOV     EBP, ESP
    MOV     ESI, [EBP + 12]
    
    MOV     EDX, 0
    MOV     EAX, [EBP + 8]
    CDQ
    IDIV    EBX
    MOV     ECX, EAX
    CMP     EDX, 0
    JE      L2
    MOV     ECX, EAX
    SUB     ECX, 1
    
L1:
    ADD     ESI, 4
    LOOP    L1
    MOV     EAX, [ESI]
    JMP     next
    
L2:
    ADD     ESI, 4
    LOOP    L2
    MOV     EAX, [ESI]
    ADD     EAX, [ESI - 4]
    MOV     EBX, 2
    CDQ
    IDIV    EBX
    
next:
    CALL    WriteDec
    
    POP     EBP
    RET     8

displayMedian ENDP
    
displayList PROC
    PUSH    EBP
    MOV     EBP, ESP
    
    CALL    CrLF
    MOV     EDX, [EBP + 8]
    CALL    WrtieString
    CALL    CrLF
    
    MOV     ESI, [EBP + 20]
    MOV     ECX, [EBP + 16]
    MOV     EDX, [EBP + 12] 
    MOV     EBX, 0
    
Loop1:
    
    MOV     EAX, [ESI]
    CALL    WriteDec
    INC     EBX
    
    MOV     EDX, [EBP + 12]
    CALL    WriteString
    
    ADD     ESI, 4
    CMP     EBX, 20
    JE      moveline
    JMP     nextvalue 
    
moveline: 
    MOV     EBX, 0
    CALL    CrLF
    
nextvalue: 
    LOOP    Loop1
    
    POP     EBP
    RET     16

displayList ENDP

countList   PROC
    PUSH    EBP
    MOV     EBP, ESP
    MOV     ESI, [EBP + 20]
    MOV     ECX, [EBP + 12]
   
countLoop:
    MOV     EAX, 1
continue:
    MOV     EBX, [ESI]
    CMP     EBX, [ESI + 4]
    JNE     print
    ADD     EAX, 1
    ADD     ESI, 4
    LOOP    continue
    JMP     done
    
print:
    PUSH    [EBP + 16]
    PUSH    [EBP + 8]
    PUSH    EAX
    CALL    addto
    
    ADD     ESI, 4
    LOOP    countloop
    
done: 
    POP     EBP
    RET     16
    
countList ENDP

addto PROC
    PUSH    EBP
    MOV     EBP, ESP
    MOV     ESI, [countarray]
    MOV     EAX, 5
    MOV     ECX, arraysize
    
    CMP     ECX, 0
    JZ      done2
    
countLoop3:
    ADD     ESI, 4
    LOOp    countLoop3
    
done2:
    MOV     [ESI], EAX
    INC     arraysize
    MOV     EAX, [ESI]
    CALL    WriteDec
    CALL    CrLF
    
    POP     EBP
    RET     12
    
addto ENDP

farewell    PROC
    PUSH    EBP
    MOV     EBP, ESP
    
    CALL    CrLF
    CALL    CrLF
    MOV     EDX, [EBP + 8]
    CALL    WriteString
    CALL    CrLF
    CALL    CrLF
    
    POP     EBP
    RET     8
    
farewell ENDP
END main
