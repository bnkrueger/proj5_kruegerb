TITLE Program5    (Program5.asm)

INCLUDE Irvine32.inc

; (insert constant definitions here)
    ARRAY_SIZE = 200
    PER_LINE = 20
    LO_RANDOM = 15
    HI_RANDOM = 50

.data
programtitle    BYTE    "Welcome to Generating, Sorting, and Counting Random integers!", 0
authorname      BYTE    "Author: Brianna Krueger", 0 
introduction    BYTE    "This program generates 200 random integers between 15 and 50, inclusive.
                         It then displays the original list, sorts the list, displays the median value of the list,
                         displays the list sorted in ascending order, and finally displays the number of instances
                         of each generated value, starting with the number of lowest.", 0
unsorted        BYTE    "Your unsorted randomm numbers:", 0
median          BYTE    "The median value of the array:", 0
sorted          BYTE     "Your sorted random numbers:", 0

instance        BYTE    "Your list of instances of each generated number, starting with the smallest value:", 0
goodbye         BYTE    "Thanks for trying out the programm! Goodbye.", 0
array           DWORD   200 DUP(?)
countarray      DWORD   200 DUP(?)
arraysize       DWORD   0
space           BYTE    " ", 0

.code
main PROC

    ; CALL    Randomize ?
    
    
    ; introduction 
    PUSH    OFFSET programtitle     ;16
    PUSH    OFFSET authorname       ;12
    PUSH    OFFSET introduction     ;8
    CALL    introduction 
    
    ;fill array
    PUSH    OFFSET array
    PUSH    OFFSET arraysize
    PUSH    HI_RANDOM
    PUSH    LO_RANDOM
    CALL    fillArray
    CALL    CrLF
    
    ;unsorted list label
    PUSH    OFFSET unsorted
    CALL    unsortLabel
    CALL    CrLF
    
    ;unsorted list
    PUSH    OFFSET array
    PUSH    arraysize
    PUSH    OFFSET space
    CALL    displayArray
    CALL    CrLF
    CALL    CrLF
    
    
    exit
main ENDP

introduction PROC
    PUSH    EBP
    MOV     EBP, ESP
    MOV     EDX, [EBP + 16]
    CALL    WriteString
    CALL    CrLF
    
    MOV     EDX, [EBP + 12]
    MOV     WriteString
    CALL    CrLF
    
    MOV     EDX, [EBP + 8]
    CALL    WriteString
    CALL    CrLF
    CALL    CrLF
    
    POP     EBP
    RET     8
    
introduction ENDP

fillArray PROC
    PUSH    EBP
    MOV     EBP, ESP 
    MOV     ESI, [EBP + 12] 
    MOV     ECX, [EBP + 8]      ;array size... set loop counter
    
    fillvalues:
    MOV     EAX, HI_RANDOM
    SUB     EAX, LO_RANDOM
    INC     EAX
    CALL    RandomRange
    ADD     EAX, LO_RANDOM
    MOV     [ESI], EAX
    
    ADD     ESI, 4
    LOOP    fillvalues
    
    POP     EBP
    RET     4
    
fillArray ENDP
 
unsortLabel PROC
    
    PUSH    EBP
    MOV     EBP, ESP
    
    MOV     EDX, [EBP + 8]
    CALL    WriteString
    
unsortLabel ENDP
 
displayArray PROC
    PUSH    EBP
    MOV     EBP, ESP
    
    CALL    CrLF
    MOV     EDX, [EBP + 8]
    CALL    WrtieString
    CALL    CrLF
    
    MOV     ESI, [EBP + 20]
    MOV     ECX, [EBP + 16]
    MOV     EDX, [EBP + 12] 
    MOV     EBX, 0
    
Loop1:
    
    MOV     EAX, [ESI]
    CALL    WriteDec
    INC     EBX
    
    MOV     EDX, [EBP + 12]
    CALL    WriteString
    
    ADD     ESI, 4
    CMP     EBX, 20
    JE      moveline
    JMP     nextvalue 
    
moveline: 
    MOV     EBX, 0
    CALL    CrLF
    
nextvalue: 
    LOOP    Loop1
    
    POP     EBP
    RET     16

displayArray ENDP
 
sortList PROC
 
 
